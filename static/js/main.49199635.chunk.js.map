{"version":3,"sources":["logo.svg","LeafletMap.js","pins.js","city-info.js","MapGlMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Pins","this","props","data","onClick","map","city","index","key","longitude","latitude","style","backgroundImage","image","backgroundSize","width","height","cursor","React","PureComponent","geolocateStyle","position","top","left","padding","fullscreenControlStyle","navStyle","scaleControlStyle","bottom","MapGlMap","state","viewport","bearing","pitch","zoom","localIdeographFontFamily","popupInfo","_updateViewport","setState","_onClickMarker","tipSize","anchor","closeOnClick","onClose","class","preload","playsinline","poster","src","tabindex","mapStyle","onViewportChange","mapboxApiAccessToken","process","CITIES","_renderPopup","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.49199635.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\n\nexport default class SimpleExample extends Component {\n  state = {\n    lat: 51.505,\n    lng: -0.09,\n    zoom: 13\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n\n    return (\n      <LeafletMap center={position} zoom={this.state.zoom}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n        <Marker position={position}>\n          <Popup>\n            A pretty CSS3 popup. <br/> Easily customizable.\n          </Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}","import React from 'react';\nimport {Marker} from 'react-map-gl';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 20;\n\nconst geojson = {\n  type: \"FeatureCollection\",\n  features: [\n    {\n      type: \"Feature\",\n      properties: {\n        message: \"Foo\",\n        iconSize: [60, 60],\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [121.324462890625, 29.024695711685304],\n      },\n    },\n    {\n      type: \"Feature\",\n      properties: {\n        message: \"Bar\",\n        iconSize: [50, 50],\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [119.2158203125, 31.97189158092897],\n      },\n    },\n    {\n      type: \"Feature\",\n      properties: {\n        message: \"Baz\",\n        iconSize: [40, 40],\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [120.29223632812499, 31.28151823530889],\n      },\n    },\n  ],\n};\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends React.PureComponent {\n  render() {\n    const {data, onClick} = this.props;\n\n    return data.map((city, index) => (\n      <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n\t\t\t\t<div style={{backgroundImage: `url(${city.image})`,backgroundSize: 'cover', width: '60px', height: '45px', cursor: 'pointer'}}\n\t\t\t\t\tonClick={() => onClick(city)}\n\t\t\t\t></div>\n        {/* <svg\n          height={SIZE}\n          viewBox=\"0 0 24 24\"\n          style={{\n            cursor: 'pointer',\n            fill: '#d00',\n            stroke: 'none',\n            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n          }}\n          onClick={() => onClick(city)}\n        >\n          <path d={ICON} />\n        </svg> */}\n      </Marker>\n    ));\n  }\n}\n","import React from 'react';\n\nexport default class CityInfo extends React.PureComponent {\n  render() {\n    const {info} = this.props;\n    const displayName = `${info.city}, ${info.state}`;\n\n    return (\n      <div>\n        <div>\n          {displayName} |{' '}\n          <a\n            target=\"_new\"\n            href={`http://en.wikipedia.org/w/index.php?title=Special:Search&search=${displayName}`}\n          >\n            Wikipedia\n          </a>\n        </div>\n        <img width={240} src={info.image} alt={`${info.city} ${info.state}`} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport MapGL, {Popup, Marker, NavigationControl, ScaleControl, FullscreenControl, GeolocateControl} from \"react-map-gl\";\n\nimport Pins from './pins';\nimport CityInfo from './city-info';\nimport CITIES from './data/cities.json';\n\nconst geolocateStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nconst fullscreenControlStyle = {\n  position: 'absolute',\n  top: 36,\n  left: 0,\n  padding: '10px'\n};\n\nconst navStyle = {\n  position: 'absolute',\n  top: 72,\n  left: 0,\n  padding: '10px'\n};\n\nconst scaleControlStyle = {\n  position: 'absolute',\n  bottom: 36,\n  left: 0,\n  padding: '10px'\n};\n\nexport default class MapGlMap extends Component {\n  state = {\n\t\tviewport: {\n\t\t\tlatitude: 37.785164,\n\t\t\tlongitude: -100,\n\t\t\tbearing: 0,\n\t\t\tpitch: 0,\n      zoom: 3.5,\n      localIdeographFontFamily: \"'Noto Sans', 'Noto Sans CJK SC', sans-serif\"\n\t\t},\n\t\tpopupInfo: null\n  }\n\n  _updateViewport = viewport => {\n    this.setState({viewport});\n  };\n\n  _onClickMarker = city => {\n    this.setState({popupInfo: city});\n  };\n\n  _renderPopup() {\n    const {popupInfo} = this.state;\n\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.longitude}\n          latitude={popupInfo.latitude}\n          closeOnClick={false}\n          onClose={() => this.setState({popupInfo: null})}\n        >\n          {/* <CityInfo info={popupInfo} /> */}\n\t\t\t\t\t<video class=\"video-react-video\" preload=\"auto\" playsinline=\"\" poster=\"/assets/poster.png\" src=\"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\" tabindex=\"-1\"></video>\n        </Popup>\n      )\n    );\n  }\n\n  render() {\n    const {viewport} = this.state;\n\n    return (\n      <MapGL\n        {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n        onViewportChange={this._updateViewport}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n      >\n        <Pins data={CITIES} onClick={this._onClickMarker} />\n\n        {this._renderPopup()}\n\n        <div style={geolocateStyle}>\n          <GeolocateControl />\n        </div>\n        <div style={fullscreenControlStyle}>\n          <FullscreenControl />\n        </div>\n        <div style={navStyle}>\n          <NavigationControl />\n        </div>\n        <div style={scaleControlStyle}>\n          <ScaleControl />\n        </div>\n\n      </MapGL>\n    );\n  }\n}","// @flow\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nimport SimpleExample from './LeafletMap';\nimport MapGlMap from './MapGlMap';\n\nfunction App() {\n  const handleClick = () => {\n    import(\"./components/moduleA\")\n      .then(({ moduleA }) => {\n        // Use moduleA\n        alert(moduleA);\n      })\n      .catch(err => {\n        // Handle failure\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={handleClick} />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <MapGlMap />\n    </div>\n    // <SimpleExample />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}